version: '3.8'

services:
  # Supabase Studio - Web-based UI
  studio:
    hostname: studio
    image: supabase/studio:20241106-f29003e_amd64
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: any
      replicas: 1
      # placement:
      #   constraints:
      #     - node.labels.server == production
    networks:
      - supabase_overlay
    healthcheck:
      test: >
        node -e "require('http').get('http://localhost:3000/api/profile', (r) => {if (r.statusCode !== 200) throw new Error(r.statusCode)})"
      timeout: 10s
      interval: 5s
      retries: 3
      start_period: 30s
    environment:
      HOSTNAME: 0.0.0.0
      STUDIO_PG_META_URL: http://meta:8080
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DEFAULT_ORGANIZATION_NAME: ${STUDIO_DEFAULT_ORGANIZATION}
      DEFAULT_PROJECT_NAME: ${STUDIO_DEFAULT_PROJECT}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      SUPABASE_URL: http://kong:8000
      SUPABASE_PUBLIC_URL: ${SUPABASE_PUBLIC_URL}
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}
      AUTH_JWT_SECRET: ${JWT_SECRET}
      LOGFLARE_API_KEY: ${LOGFLARE_API_KEY}
      LOGFLARE_URL: http://analytics:4000
      NEXT_PUBLIC_ENABLE_LOGS: 1
      NEXT_ANALYTICS_BACKEND_PROVIDER: postgres

  # Kong - API Gateway
  kong:
    hostname: kong
    networks:
      - supabase_overlay
    image: kong:2.8.1
    env_file:
      - .env
    entrypoint: bash -c 'eval "echo \"$$(cat ~/temp.yml)\"" > ~/kong.yml && /docker-entrypoint.sh kong docker-start'
    deploy:
      restart_policy:
        condition: any
      replicas: 1
      # placement:
      #   constraints:
      #     - node.labels.server == production
      # labels:
      #   - 'traefik.enable=true'
      #   - 'traefik.constraint-label=supabase_overlay'
      #   - 'traefik.docker.network=supabase_overlay'
      #   - 'traefik.http.services.production-supabase.loadbalancer.server.port=8000'
      #   - 'traefik.http.routers.production-supabase-http.rule=Host(`your-domain.com`)'
      #   - 'traefik.http.routers.production-supabase-http.entrypoints=http'
      #   - 'traefik.http.routers.production-supabase-http.middlewares=https-redirect'
      #   - 'traefik.http.routers.production-supabase-https.rule=Host(`your-domain.com`)'
      #   - 'traefik.http.routers.production-supabase-https.entrypoints=https'
      #   - 'traefik.http.routers.production-supabase-https.tls=true'
      #   - 'traefik.http.routers.production-supabase-https.tls.certresolver=le'
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: /home/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl,basic-auth
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}
      DASHBOARD_USERNAME: ${DASHBOARD_USERNAME}
      DASHBOARD_PASSWORD: ${DASHBOARD_PASSWORD}
    configs:
      - source: kong.yml
        target: /home/kong/temp.yml

  # GoTrue - Auth Service
  auth:
    hostname: auth
    image: supabase/gotrue:v2.167.0
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: any
      replicas: 1
      # placement:
      #   constraints:
      #     - node.labels.server == production
    networks:
      - supabase_overlay
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://auth:9999/health',
        ]
      timeout: 5s
      interval: 5s
      retries: 3
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: ${API_EXTERNAL_URL}
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://supabase_auth_admin:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      GOTRUE_SITE_URL: ${SITE_URL}
      GOTRUE_URI_ALLOW_LIST: ${ADDITIONAL_REDIRECT_URLS}
      GOTRUE_DISABLE_SIGNUP: ${DISABLE_SIGNUP}
      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_EXP: ${JWT_EXPIRY}
      GOTRUE_JWT_SECRET: ${JWT_SECRET}
      GOTRUE_EXTERNAL_EMAIL_ENABLED: ${ENABLE_EMAIL_SIGNUP}
      GOTRUE_EXTERNAL_ANONYMOUS_USERS_ENABLED: ${ENABLE_ANONYMOUS_USERS}
      GOTRUE_MAILER_AUTOCONFIRM: ${ENABLE_EMAIL_AUTOCONFIRM}
      GOTRUE_SMTP_ADMIN_EMAIL: ${SMTP_ADMIN_EMAIL}
      GOTRUE_SMTP_HOST: ${SMTP_HOST}
      GOTRUE_SMTP_PORT: ${SMTP_PORT}
      GOTRUE_SMTP_USER: ${SMTP_USER}
      GOTRUE_SMTP_PASS: ${SMTP_PASS}
      GOTRUE_SMTP_SENDER_NAME: ${SMTP_SENDER_NAME}
      GOTRUE_MAILER_URLPATHS_INVITE: ${MAILER_URLPATHS_INVITE}
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: ${MAILER_URLPATHS_CONFIRMATION}
      GOTRUE_MAILER_URLPATHS_RECOVERY: ${MAILER_URLPATHS_RECOVERY}
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: ${MAILER_URLPATHS_EMAIL_CHANGE}
      GOTRUE_EXTERNAL_PHONE_ENABLED: ${ENABLE_PHONE_SIGNUP}
      GOTRUE_SMS_AUTOCONFIRM: ${ENABLE_PHONE_AUTOCONFIRM}

      # Email templates
      GOTRUE_MAILER_TEMPLATES_INVITE: ${MAILER_TEMPLATES_INVITE}
      GOTRUE_MAILER_TEMPLATES_CONFIRMATION: ${MAILER_TEMPLATES_CONFIRMATION}
      GOTRUE_MAILER_TEMPLATES_RECOVERY: ${MAILER_TEMPLATES_RECOVERY}
      GOTRUE_MAILER_TEMPLATES_MAGIC_LINK: ${MAILER_TEMPLATES_MAGIC_LINK}
      GOTRUE_MAILER_TEMPLATES_EMAIL_CHANGE: ${MAILER_TEMPLATES_EMAIL_CHANGE}

      GOTRUE_MAILER_SUBJECTS_CONFIRMATION: ${MAILER_SUBJECTS_CONFIRMATION}
      GOTRUE_MAILER_SUBJECTS_RECOVERY: ${MAILER_SUBJECTS_RECOVERY}
      GOTRUE_MAILER_SUBJECTS_MAGIC_LINK: ${MAILER_SUBJECTS_MAGIC_LINK}
      GOTRUE_MAILER_SUBJECTS_EMAIL_CHANGE: ${MAILER_SUBJECTS_EMAIL_CHANGE}
      GOTRUE_MAILER_SUBJECTS_INVITE: ${MAILER_SUBJECTS_INVITE}

      GOTRUE_MFA_PHONE_OTP_LENGTH: ${GOTRUE_MFA_PHONE_OTP_LENGTH}
      GOTRUE_MFA_PHONE_TEMPLATE: ${GOTRUE_MFA_PHONE_TEMPLATE}
      GOTRUE_MFA_MAX_ENROLLED_FACTORS: ${GOTRUE_MFA_MAX_ENROLLED_FACTORS}
      GOTRUE_MFA_TOTP_ENROLL_ENABLED: ${GOTRUE_MFA_TOTP_ENROLL_ENABLED}
      GOTRUE_MFA_TOTP_VERIFY_ENABLED: ${GOTRUE_MFA_TOTP_VERIFY_ENABLED}
  # PostgREST - RESTful API
  rest:
    container_name: supabase-rest
    image: postgrest/postgrest:v12.2.0
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: any
      replicas: 1
      # placement:
      #   constraints:
      #     - node.labels.server == production
    networks:
      - supabase_overlay
    environment:
      PGRST_DB_URI: postgres://authenticator:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      PGRST_DB_SCHEMAS: ${PGRST_DB_SCHEMAS}
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: 'false'
      PGRST_APP_SETTINGS_JWT_SECRET: ${JWT_SECRET}
      PGRST_APP_SETTINGS_JWT_EXP: ${JWT_EXPIRY}
    command: 'postgrest'

  # Realtime - Real-time subscriptions
  realtime:
    container_name: realtime-dev.supabase-realtime
    image: supabase/realtime:v2.34.7
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: any
      replicas: 1
      # placement:
      #   constraints:
      #     - node.labels.server == production
    networks:
      - supabase_overlay
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-sSfL",
          "--head",
          "-o",
          "/dev/null",
          "-H",
          "Authorization: Bearer ${ANON_KEY}",
          "http://localhost:4000/api/tenants/realtime-dev/health"
        ]
      timeout: 5s
      interval: 5s
      retries: 3
    environment:
      PORT: 4000
      DB_HOST: ${POSTGRES_HOST}
      DB_PORT: ${POSTGRES_PORT}
      DB_USER: supabase_admin
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      DB_AFTER_CONNECT_QUERY: 'SET search_path TO _realtime'
      DB_ENC_KEY: supabaserealtime
      API_JWT_SECRET: ${JWT_SECRET}
      SECRET_KEY_BASE: UpNVntn3cDxHJpq99YMc1T1AQgQpc8kfYTuRgBiYa15BLrx8etQoXz3gZv1/u2oq
      ERL_AFLAGS: -proto_dist inet_tcp
      DNS_NODES: "''"
      RLIMIT_NOFILE: "10000"
      APP_NAME: realtime
      SEED_SELF_HOST: 'true'
      RUN_JANITOR: 'true'
      ANON_KEY: ${ANON_KEY}
    command: >
      sh -c "/app/bin/migrate && /app/bin/realtime eval 'Realtime.Release.seeds(Realtime.Repo)' && /app/bin/server"

  # Storage API
  storage:
    hostname: storage
    image: supabase/storage-api:v1.14.5
    env_file:
      - .env
    networks:
      - supabase_overlay
    deploy:
      restart_policy:
        condition: any
      replicas: 1
      # placement:
      #   constraints:
      #     - node.labels.server == production
    healthcheck:
      test: >
        wget --no-verbose --tries=1 --spider http://0.0.0.0:5000/status
      timeout: 5s
      interval: 5s
      retries: 3
    environment:
      ANON_KEY: ${ANON_KEY}
      SERVICE_KEY: ${SERVICE_ROLE_KEY}
      POSTGREST_URL: http://rest:3000
      PGRST_JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: postgres://supabase_storage_admin:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      FILE_SIZE_LIMIT: 52428800
      STORAGE_BACKEND: s3

      GLOBAL_S3_BUCKET: supabase-production-storage-bucket
      GLOBAL_S3_ENDPOINT: https://s3.amazonaws.com
      GLOBAL_S3_PROTOCOL: https
      GLOBAL_S3_FORCE_PATH_STYLE: "false"

      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}

      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      TENANT_ID: stub
      REGION: ${AWS_DEFAULT_REGION}
      ENABLE_IMAGE_TRANSFORMATION: "true"
      IMGPROXY_URL: http://imgproxy:5001

      UPLOAD_SIGNED_URL_EXPIRATION_TIME: 10800
      SIGNED_UPLOAD_URL_EXPIRATION_TIME: 10800
    volumes:
      - supabase-production-storage-data:/var/lib/storage:z

  # Image Proxy
  imgproxy:
    container_name: supabase-imgproxy
    image: darthsim/imgproxy:v3.8.0
    env_file:
      - .env
    networks:
      - supabase_overlay
    deploy:
      restart_policy:
        condition: any
      replicas: 1
      # placement:
      #   constraints:
      #     - node.labels.server == production
    healthcheck:
      test: ['CMD', 'imgproxy', 'health']
      timeout: 5s
      interval: 5s
      retries: 3
    environment:
      IMGPROXY_BIND: ':5001'
      IMGPROXY_LOCAL_FILESYSTEM_ROOT: /
      IMGPROXY_USE_ETAG: 'true'
      IMGPROXY_ENABLE_WEBP_DETECTION: ${IMGPROXY_ENABLE_WEBP_DETECTION}
    volumes:
      - supabase-production-storage-data:/var/lib/storage:z

  # Meta API
  meta:
    hostname: meta
    image: supabase/postgres-meta:v0.84.2
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: any
      replicas: 1
      # placement:
      #   constraints:
      #     - node.labels.server == production
    networks:
      - supabase_overlay
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: ${POSTGRES_HOST}
      PG_META_DB_PORT: ${POSTGRES_PORT}
      PG_META_DB_NAME: ${POSTGRES_DB}
      PG_META_DB_USER: supabase_admin
      PG_META_DB_PASSWORD: ${POSTGRES_PASSWORD}

  # Edge Functions
  functions:
    container_name: supabase-edge-functions
    image: supabase/edge-runtime:v1.66.4
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: any
      replicas: 1
      # placement:
      #   constraints:
      #     - node.labels.server == production
    networks:
      - supabase_overlay
    environment:
      JWT_SECRET: ${JWT_SECRET}
      SUPABASE_URL: http://kong:8000
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY}
      SUPABASE_DB_URL: postgresql://postgres:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      VERIFY_JWT: '${FUNCTIONS_VERIFY_JWT}'
    volumes:
      - supabase-production-functions-data:/home/deno/functions:Z
    configs:
      - source: main.ts
        target: /home/deno/functions/main/index.ts
    command:
      - start
      - --main-service
      - /home/deno/functions/main

  # Analytics
  analytics:
    container_name: supabase-analytics
    image: supabase/logflare:1.4.0
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: any
      replicas: 1
      # placement:
      #   constraints:
      #     - node.labels.server == production
    networks:
      - supabase_overlay
    healthcheck:
      test: ['CMD', 'curl', 'http://localhost:4000/health']
      timeout: 5s
      interval: 5s
      retries: 10
    environment:
      LOGFLARE_NODE_HOST: 127.0.0.1
      DB_USERNAME: supabase_admin
      DB_DATABASE: ${POSTGRES_DB}
      DB_HOSTNAME: ${POSTGRES_HOST}
      DB_PORT: ${POSTGRES_PORT}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_SCHEMA: _analytics
      LOGFLARE_API_KEY: ${LOGFLARE_API_KEY}
      LOGFLARE_SINGLE_TENANT: 'true'
      LOGFLARE_SUPABASE_MODE: 'true'
      LOGFLARE_MIN_CLUSTER_SIZE: 1
      POSTGRES_BACKEND_URL: postgresql://supabase_admin:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      POSTGRES_BACKEND_SCHEMA: _analytics
      LOGFLARE_FEATURE_FLAG_OVERRIDE: multibackend=true

  # Database
  db:
    hostname: db
    container_name: supabase-db
    image: supabase/postgres:15.8.1.020
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: any
      replicas: 1
      # placement:
      #   constraints:
      #     - node.labels.server == production
      # labels:
      #   - 'traefik.enable=${EXPOSE_TRAEFIK:-false}'
      #   - 'traefik.constraint-label=supabase_overlay'
      #   - 'traefik.docker.network=supabase_overlay'
      #   - "traefik.tcp.routers.production-postgres.rule=HostSNI(`postgres.your-domain.com`)"
      #   - "traefik.tcp.routers.production-postgres.entrypoints=postgres"
      #   - "traefik.tcp.routers.production-postgres.service=production-postgres-service"
      #   - "traefik.tcp.services.production-postgres-service.loadbalancer.server.port=${POSTGRES_PORT}"
      #   - "traefik.tcp.routers.production-postgres.tls=true"
      #   - "traefik.tcp.routers.production-postgres.tls.certresolver=le"
    networks:
      - supabase_overlay
    healthcheck:
      test: pg_isready -U postgres -h localhost
      interval: 5s
      timeout: 5s
      retries: 10
    command:
      - postgres
      - -c
      - config_file=/etc/postgresql/postgresql.conf
      - -c
      - log_min_messages=fatal
    environment:
      POSTGRES_HOST: /var/run/postgresql
      PGPORT: ${POSTGRES_PORT}
      POSTGRES_PORT: ${POSTGRES_PORT}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB}
      POSTGRES_DB: ${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXP: ${JWT_EXPIRY}
    volumes:
      - supabase-production-db-data:/var/lib/postgresql/data:Z
      - supabase-production-db-config:/etc/postgresql-custom
    configs:
      - source: 99-realtime.sql
        target: /docker-entrypoint-initdb.d/migrations/99-realtime.sql
      - source: 98-webhooks.sql
        target: /docker-entrypoint-initdb.d/init-scripts/98-webhooks.sql
      - source: 99-roles.sql
        target: /docker-entrypoint-initdb.d/init-scripts/99-roles.sql
      - source: 99-jwt.sql
        target: /docker-entrypoint-initdb.d/init-scripts/99-jwt.sql
      - source: 99-logs.sql
        target: /docker-entrypoint-initdb.d/migrations/99-logs.sql
      - source: 97-_supabase.sql
        target: /docker-entrypoint-initdb.d/migrations/97-_supabase.sql
      - source: 99-pooler.sql
        target: /docker-entrypoint-initdb.d/migrations/99-pooler.sql

  # Vector - Log collection and forwarding
  vector:
    hostname: vector
    image: timberio/vector:0.28.1-alpine
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: any
      replicas: 1
      # placement:
      #   constraints:
      #     - node.labels.server == production
    networks:
      - supabase_overlay
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://vector:9001/health || exit 1
      timeout: 5s
      interval: 5s
      retries: 3
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    configs:
      - source: vector.yml
        target: /etc/vector/vector.yml
    environment:
      LOGFLARE_API_KEY: ${LOGFLARE_API_KEY}
    command: ['--config', 'etc/vector/vector.yml']

volumes:
  supabase-production-storage-data:
    external: true
  supabase-production-functions-data:
    external: true
  supabase-production-db-data:
    external: true
  supabase-production-db-config:
    external: true

networks:
  supabase_overlay:
    external: true

configs:
  99-logs.sql:
    external: true
  99-realtime.sql:
    external: true
  99-roles.sql:
    external: true
  98-webhooks.sql:
    external: true
  99-jwt.sql:
    external: true
  97-_supabase.sql:
    external: true
  99-pooler.sql:
    external: true
    
  vector.yml:
    external: true
  kong.yml:
    external: true
  main.ts:
    external: true
